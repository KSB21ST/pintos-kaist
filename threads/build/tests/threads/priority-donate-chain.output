Kernel command line: -q run priority-donate-chain
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  104,755,200 loops/s.
Boot complete.
Executing 'priority-donate-chain':
(priority-donate-chain) begin
(priority-donate-chain) main got lock.
(priority-donate-chain) main should have priority 3.  Actual priority: 3.
(priority-donate-chain) main should have priority 6.  Actual priority: 3.
(priority-donate-chain) interloper 2 finished.
(priority-donate-chain) main should have priority 9.  Actual priority: 3.
(priority-donate-chain) interloper 3 finished.
(priority-donate-chain) main should have priority 12.  Actual priority: 3.
(priority-donate-chain) interloper 4 finished.
(priority-donate-chain) main should have priority 15.  Actual priority: 3.
(priority-donate-chain) interloper 5 finished.
(priority-donate-chain) main should have priority 18.  Actual priority: 3.
(priority-donate-chain) interloper 6 finished.
(priority-donate-chain) main should have priority 21.  Actual priority: 3.
(priority-donate-chain) interloper 7 finished.
(priority-donate-chain) thread 1 got lock
(priority-donate-chain) thread 1 should have priority 21. Actual priority: 6
(priority-donate-chain) thread 2 got lock
(priority-donate-chain) (priority-donate-chain) (priority-donate-chain) main finishing with priority 3.thread 1 finishing with priority 3.thread 2 should have priority 21. Actual priority: 3


Kernel PANIC at ../../threads/synch.c:244 in lock_release(): assertion `lock_held_by_current_thread (lock)' failed.
Call stack: 0x800421329d 0x8004209ec0 0x8004219702 0x80042071ac.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 25 ticks
Thread: 0 idle ticks, 25 kernel ticks, 0 user ticks
Console: 1